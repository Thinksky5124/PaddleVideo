MODEL: #MODEL field
    framework: "Recognizer2D" #Mandatory, indicate the type of network, associate to the 'paddlevideo/modeling/framework/' .
    backbone: #Mandatory, indicate the type of backbone, associate to the 'paddlevideo/modeling/backbones/' .
        name: "ResNetTSM" #Mandatory, The name of backbone.
        pretrained: "data/ResNet50_pretrain.pdparams" #Optional, pretrained model path.
        num_seg: 15
        depth: 50 #Optional, the depth of backbone architecture.
    head:
        name: "TSMExtractorHead" #Mandatory, indicate the type of head, associate to the 'paddlevideo/modeling/heads'
        in_channels: 2048 #input channel of the extracted feature.


DATASET: #DATASET field
    batch_size: 8 #Mandatory, bacth size
    num_workers: 4 #Mandatory, XXX the number of subprocess on each GPU.
    train:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "./" #Mandatory, train data root path
        file_path: "data/gtea/recognition_label.txt" #Mandatory, train data index file path
    valid:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "./" #Mandatory, train data root path
        file_path: "data/gtea/recognition_val.txt" #Mandatory, valid data index file path
    test:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "./" #Mandatory, train data root path
        file_path: "data/gtea/recognition_val.txt" #Mandatory, valid data index file path


PIPELINE: #PIPELINE field
    train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: "decord"
        sample:
            name: "Sampler"
            num_seg: 15
            seg_len: 1
            valid_mode: False
            select_left: True
        transform: #Mandotary, image transform operator.
            - MultiScaleCrop:
                target_size: 224
                allow_duplication: True
            - RandomFlip:
            - Image2Array:
            - Normalization:
                mean: [0.551, 0.424, 0.179]
                std: [0.133, 0.141, 0.124]

    valid: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: "decord"
        sample:
            name: "Sampler"
            num_seg: 15
            seg_len: 1
            valid_mode: True
            select_left: True
        transform:
            - Scale:
                short_size: 256
                fixed_ratio: False
            - CenterCrop:
                target_size: 224
            - Image2Array:
            - Normalization:
                mean: [0.551, 0.424, 0.179]
                std: [0.133, 0.141, 0.124]

    test:
        decode:
            name: "VideoDecoder"
            backend: "decord"
        sample:
            name: "Sampler"
            num_seg: 15
            seg_len: 1
            valid_mode: True
            select_left: True
        transform:
            - Scale:
                short_size: 256
                fixed_ratio: False
            - CenterCrop:
                target_size: 224
            - Image2Array:
            - Normalization:
                mean: [0.551, 0.424, 0.179]
                std: [0.133, 0.141, 0.124]

OPTIMIZER: #OPTIMIZER field
    name: 'Momentum' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
    momentum: 0.9
    learning_rate: #Mandatory, the type of learning rate scheduler, associate to the 'paddlevideo/solver/'
        name: 'PiecewiseDecay'
        boundaries: [10, 40]
        values: [0.02, 0.001, 0.0005]  #1 cards * 8 batch size
    weight_decay:
        name: 'L2'
        value: 0.0001
    grad_clip:
        name: 'ClipGradByGlobalNorm'
        value: 20.0


METRIC:
    name: 'CenterCropMetric'

INFERENCE:
    name: 'Inference_helper'
    num_seg: 15
    target_size: 224
    mean: [0.551, 0.424, 0.179]
    std: [0.133, 0.141, 0.124]
    feature_dim: 2048

model_name: "TSM"
log_interval: 20 #Optional, the interal of logger, default:10
save_interval: 10
epochs: 50 #Mandatory, total epoch
log_level: "INFO" #Optional, the logger level. default: "INFO"
